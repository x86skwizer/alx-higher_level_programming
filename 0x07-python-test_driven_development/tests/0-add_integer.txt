# 0-add_integer


===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.


Using ``add_integer``
====================

``add_integer`` return an integer: the addition of a and b.

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(0, 1)
    1
    
::
    >>> add_integer(42, 58)
    100

It also works with floating-point values.

::
    >>> add_integer(4.2, 24.2)
    28

::
    >>> add_integer(-1.0, -1.10)
    -2

Floating and non-floating point can be combined.

::
    >>> add_integer(1.3, -3)
    -2

::
    >> add_integer(3.9, 5)
    8

The second argument by default it is 98.

::
    >>> add_integer(0)
    98

::
    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer(a, b=98)`` a and b must be integer or floats.
Otherwise raise a TypeError:

::
    >>> add_integer("python", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(1, "python")
    Traceback (most recent call last):
    TypeError: b must be an integer

::
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::
NaN numbers.

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
